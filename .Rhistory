View(cats)
cats <- pivot_longer(cats, cols = everything())
View(cats)
cats <- pivot_longer(cats, cols = everything(), values_to = "categories")
View(cats)
cats <- pivot_longer(cats, cols = everything())
View(cats)
cats <- GET("https://opentdb.com/api_category.php")
cats <- content(cats, 'parsed')
cats <- cats$trivia_categories
cats <- as.data.frame(cats)
cats <- select(cats, starts_with("name"))
cats <- pivot_longer(cats, cols = everything(), values_to = "categories")
View(cats)
cats['categories']
cats <- cats['categories']
get_categories <- function(){
cats <- httr::GET("https://opentdb.com/api_category.php")
cats <- httr::content(cats, 'parsed')
cats <- cats$trivia_categories
cats <- as.data.frame(cats)
cats <- dplyr::select(cats, starts_with("name"))
cats <- tidyr::pivot_longer(cats, cols = everything(), values_to = "categories")
cats <- cats['categories']
return(cats)
}
get_categories()
s
q_parsed <- content(qs, 'parsed')
View(q_parsed)
qs <- GET("https://opentdb.com/api.php?amount=1")
q_parsed <- content(qs, 'parsed')
View(q_parsed)
qs <- GET("https://opentdb.com/api.php?amount=1")
q_parsed <- content(qs, 'parsed')
View(q_parsed)
View(q_results)
parsed <- parse_raw_data(qs)
parse_raw_data <- function(unparsed_data){
dat_parsed <- httr::content(unparsed_data, 'parsed')
dat <- as.data.frame(dat_parsed$results[[1]])
return(dat)
}
parsed <- parse_raw_data(qs)
View(parsed)
qs <- GET("https://opentdb.com/api.php?amount=1")
q_parsed <- content(qs, 'parsed')
q_results <- q_parsed$results[[1]]
View(q_results)
qs <- GET("https://opentdb.com/api.php?amount=1")
q_parsed <- content(qs, 'parsed')
q_results <- q_parsed$results[[1]]
View(q_results)
qs <- GET("https://opentdb.com/api.php?amount=1")
q_parsed <- content(qs, 'parsed')
q_results <- q_parsed$results[[1]]
View(q_results)
qs <- GET("https://opentdb.com/api.php?amount=1&type=boolean")
q_parsed <- content(qs, 'parsed')
q_results <- q_parsed$results[[1]]
View(q_results)
parsed <- parse_raw_data(qs)
View(parsed)
qs <- GET("https://opentdb.com/api.php?amount=2&type=boolean")
q_parsed <- content(qs, 'parsed')
q_results <- q_parsed$results[[1]]
View(q_results)
q_parsed <- content(qs, 'parsed')
View(q_parsed)
qm <- as.data.frame(q_parsed)
View(qm)
qm <- as.data.frame(q_parsed$results)
View(qm)
## Multiple Qs
qm <- q_parsed$results
View(qm)
qms <- lapply(qm, parse_raw_data)
as.data.frame(x)
qms <- lapply(qm, function(x){
as.data.frame(x)
})
View(qms)
qms <- lapply(qm, function(x){
as.data.frame(x)
do.call(rbind, x)
})
qms2 <- do.call(rbind, qms)
qms2 <- do.call("rbind", qms)
View(qms)
qms2 <- do.call("rbind", qms)
View(qms2)
View(qms)
qms <- lapply(qm, function(x){
as.data.frame(x)
})
View(qms)
qms2 <- bind_rows(qms)
View(qms2)
qms2 <- rbind(qms)
qms <- bind_rows(qms)
qs <- GET("https://opentdb.com/api.php?amount=1&type=boolean")
q_parsed <- content(qs, 'parsed')
## Multiple Qs
qm <- q_parsed$results
qms <- lapply(qm, function(x){
as.data.frame(x)
})
qms <- bind_rows(qms)
View(qms)
#'
#' Parses the initial response from the API call. Output can have either 6 columns (boolean question) or 8 columns (multiple choice question).
#'
#' @param unparsed_data The result of a `GET` call to the OpenTriviaDB API
#'
#' @return A dataframe of either 6 or 8 columns
#' @export
#'
#' @examples
#' parse_raw_data(GET("https://opentdb.com/api.php?amount=1&type=boolean"))
parse_raw_data <- function(unparsed_data){
dat_parsed <- httr::content(unparsed_data, 'parsed')
dat <- dat_parsed$results
dat <- lapply(dat, function(x){
as.data.frame(x)
})
dat <- bind_rows(dat)
return(dat)
}
qs <- GET("https://opentdb.com/api.php?amount=2&type=boolean")
parsed <- parse_raw_data(qs)
View(parsed)
qs <- GET("https://opentdb.com/api.php?amount=1&type=boolean")
parsed <- parse_raw_data(qs)
View(parsed)
qs <- GET("https://opentdb.com/api.php?amount=2&type=boolean")
qs <- GET("https://opentdb.com/api.php?amount=20&type=boolean")
parsed <- parse_raw_data(qs)
View(parsed)
qs <- GET("https://opentdb.com/api.php?amount=20")
#'
#' Parses the initial response from the API call. Output can have either 6 columns (boolean question) or 8 columns (multiple choice question).
#'
#' @param unparsed_data The result of a `GET` call to the OpenTriviaDB API
#'
#' @return A dataframe of either 6 or 8 columns
#' @export
#'
#' @examples
#' parse_raw_data(GET("https://opentdb.com/api.php?amount=1&type=boolean"))
parse_raw_data <- function(unparsed_data){
dat_parsed <- httr::content(unparsed_data, 'parsed')
dat <- dat_parsed$results
dat <- lapply(dat, function(x){
as.data.frame(x)
})
#dat <- bind_rows(dat)
return(dat)
}
parsed <- parse_raw_data(qs)
View(parsed)
parsed_class <-
dim(parsed[[1]])
parsed_class <-
dim(parsed[[1]])
dim(parsed[[1]])
dim(parsed[[1]][[2]])
dim(parsed[[1]][2])
dim(parsed[[1]][2])
dim(parsed[[1]])
dims[2]
dims <- dim(parsed[[1]])
dims[2]
parsed_class <- lapply(parsed, function(x){
dims <- dim(x)
dims <- dims[2]
if(dims == 8){
class(x) <- "trivia_multi_choice"
}
else if (dims == 6){
class(x) <- "trivia_boolean"
}
else {
stop("Wrong number of columns")
}
})
View(parsed_class)
parsed_class[[19]]
parsed_class <- lapply(parsed, function(x){
dims <- dim(x)
dims <- dims[2]
if(dims == 8){
class(x) <- "trivia_multi_choice"
}
else if (dims == 6){
class(x) <- "trivia_boolean"
}
else {
stop("Wrong number of columns")
}
return(x)
})
View(parsed_class)
class(parsed_class[[1]])
parsed_class <- lapply(parsed, function(x){
dims <- dim(x)
dims <- dims[2]
if(dims == 8){
class(x) <- append(class(x), "trivia_multi_choice")
}
else if (dims == 6){
class(x) <- append(class(x), "trivia_boolean")
}
else {
stop("Wrong number of columns")
}
return(x)
})
View(parsed_class)
add_trivia_class <- function(parsed_data) {
parsed_class <- lapply(parsed_data, function(x){
dims <- dim(x)
dims <- dims[2]
if(dims == 8){
class(x) <- append(class(x), "trivia_multi_choice")
}
else if (dims == 6){
class(x) <- append(class(x), "trivia_boolean")
}
else {
stop("Wrong number of columns")
}
return(x)
})
}
qs <- GET("https://opentdb.com/api.php?amount=20")
parsed <- parse_raw_data(qs)
parsed_class <- add_trivia_class(parsed)
View(parsed_class)
inherits(parsed_class[[1]], "trivia_multi_choice")
parse_trivia_df <- function(data){
UseMethod("parse_trivia_df")
}
parse_trivia_df.trivia_multi_choice <- function(data){
data$new_col <- "10"
}
df <- lapply(parsed_class, parse_trivia_df)
parse_trivia_df.default <- function(data)
parse_trivia_df.default <- function(data){
return(data)
}
df <- lapply(parsed_class, parse_trivia_df)
View(df)
parse_trivia_df.trivia_multi_choice <- function(data){
data$new_col <- "10"
return(data)
}
df <- lapply(parsed_class, parse_trivia_df)
View(df)
ex_data <- parsed_class[[1]]
View(ex_data)
ex_data_unite <- tidyr::unite(ex_data, col = "possible answers", 5:8)
ex_data_unite <- tidyr::unite(ex_data, col = "possible_answers", 5:8)
rlang::last_error()
ex_data_unite <- tidyr::unite(ex_data, col = "possible_answers", c("category", "type"))
class(ex_data) <- "data.frame"
ex_data_unite <- tidyr::unite(ex_data, col = "possible_answers", c("category", "type"))
ex_data <- parsed_class[[1]]
ex_data_unite <- tidyr::unite(ex_data, col = "possible_answers", c("category", "type"))
iris <- iris
class(iris) <- append(class(iris), "new_class")
class(iris)
View(iris)
iris_unite <- tidyr::unite(iris, col = "example", c("Sepal.Length", "Sepal.Width"))
View(iris)
iris_sep <- tidyr::separate(iris, col = "Sepal.Length", sep = "/.")
iris_sep <- tidyr::separate(iris, col = "Sepal.Length", c("ex1", "ex2"), sep = "/.")
data(iris)
iris_unite <- tidyr::unite(iris, col = "example", c("Sepal.Length", "Sepal.Width"))
data(iris)
class(iris) <- append(class(iris), "new_class")
iris_unite <- tidyr::unite(iris, col = "example", c("Sepal.Length", "Sepal.Width"))
class("ex_data")
class(ex_data)
class(ex_data) <- c("trivia_multi_choice", "data.frame")
class(ex_data)
ex_data_unite <- tidyr::unite(ex_data, col = "possible_answers", c("category", "type"))
add_trivia_class <- function(parsed_data) {
parsed_class <- lapply(parsed_data, function(x){
dims <- dim(x)
dims <- dims[2]
if(dims == 8){
class(x) <- append("trivia_multi_choice", class(x))
}
else if (dims == 6){
class(x) <- append("trivia_boolean", class(x))
}
else {
stop("Wrong number of columns")
}
return(x)
})
}
parsed <- parse_raw_data(qs)
parsed_class <- add_trivia_class(parsed)
inherits(parsed_class[[1]], "trivia_multi_choice")
ex_data <- parsed_class[[1]]
class(ex_data)
ex_data_unite <- tidyr::unite(ex_data, col = "possible_answers", 5:8)
View(ex_data_unite)
parse_trivia_df <- function(data){
UseMethod("parse_trivia_df")
}
parse_trivia_df.trivia_multi_choice <- function(data){
united_data <- tidyr::unite(data, col = "possible_answers", 5:8, sep = ";")
return(data)
}
parse_trivia_df.trivia_boolean <- function(data){
united_data$possible_answers <- "True/False"
return(data)
}
parse_trivia_df.default <- function(data){
return(data)
}
df <- lapply(parsed_class, parse_trivia_df)
parse_trivia_df.trivia_boolean <- function(data){
data$possible_answers <- "True/False"
return(data)
}
df <- lapply(parsed_class, parse_trivia_df)
View(df)
parse_trivia_df.trivia_multi_choice <- function(data){
united_data <- tidyr::unite(data, col = "possible_answers", 5:8, sep = ";")
return(united_data)
}
df <- lapply(parsed_class, parse_trivia_df)
View(df)
colnames(df[[5]])
parse_trivia_df.trivia_boolean <- function(data){
data$possible_answers <- "True/False"
data[c("category", "type", "difficulty",
"question", "correct_answer", "possible_answers")]
return(data)
}
df <- lapply(parsed_class, parse_trivia_df)
View(df)
parse_trivia_df.trivia_boolean <- function(data){
data$possible_answers <- "True/False"
data <- data[c("category", "type", "difficulty",
"question", "correct_answer", "possible_answers")]
return(data)
}
df <- lapply(parsed_class, parse_trivia_df)
View(df)
View(parsed_class)
parse_trivia_df.trivia_multi_choice <- function(data){
united_data <- tidyr::unite(data, col = "possible_answers",
5:8, sep = "; ", remove = FALSE)
united_data <- dplyr::select(united_data, -starts_with("incorrect_"))
return(united_data)
}
df <- lapply(parsed_class, parse_trivia_df)
View(df)
parsed <- parse_raw_data(qs)
parsed_class <- add_trivia_class(parsed)
parsed_data <- parse_trivia_df(parsed_class)
View(parsed_data)
parse_trivia_df <- function(data){
UseMethod("parse_trivia_df")
}
parse_trivia_df.trivia_multi_choice <- function(data){
united_data <- tidyr::unite(data, col = "possible_answers",
5:8, sep = "; ", remove = FALSE)
united_data <- dplyr::select(united_data, -starts_with("incorrect_"))
return(united_data)
}
parse_trivia_df.trivia_boolean <- function(data){
data$possible_answers <- "True/False"
data <- data[c("category", "type", "difficulty",
"question", "correct_answer", "possible_answers")]
return(data)
}
parse_trivia_df.default <- function(data){
return(data)
}
parsed <- parse_raw_data(qs)
parsed_class <- add_trivia_class(parsed)
parsed_data <- parse_trivia_df(parsed_class)
View(parsed_data)
View(parsed_class)
parsed_data <- lapply(parsed_class, parse_trivia_df)
View(parsed_data)
cats <- httr::GET("https://opentdb.com/api_category.php")
cats <- httr::content(cats, 'parsed')
cats <- cats$trivia_categories
cats <- as.data.frame(cats)
cats <- dplyr::select(cats, starts_with("name"))
cats <- tidyr::pivot_longer(cats, cols = everything(), values_to = "categories")
View(cats)
cats <- httr::GET("https://opentdb.com/api_category.php")
cats <- httr::content(cats, 'parsed')
cats <- cats$trivia_categories
cats <- as.data.frame(cats)
View(cats)
cats <- httr::GET("https://opentdb.com/api_category.php")
cats <- httr::content(cats, 'parsed')
cats <- cats$trivia_categories
View(cats)
cats2 <- lapply(cats, as.data.frame)
View(cats2)
cats3 <- bind_rows(cats2)
View(cats3)
get_categories <- function(){
cats <- httr::GET("https://opentdb.com/api_category.php")
cats <- httr::content(cats, 'parsed')
cats <- cats$trivia_categories
cats <- lapply(cats, as.data.frame)
cats <- bind_rows(cats)
return(cats)
}
dat <- get_categories()
View(dat)
get_categories <- function(){
cats <- httr::GET("https://opentdb.com/api_category.php")
cats <- httr::content(cats, 'parsed')
cats <- cats$trivia_categories
cats <- lapply(cats, as.data.frame)
cats <- bind_rows(cats)
names(cats)[names(cats) == "name"] <- "category"
return(cats)
}
dat <- get_categories()
View(dat)
get_questions <- function(number,
category,
difficulty = c("any", "easy", "medium", "hard"),
type = "any", "multiple", "boolean"){
baseurl <- "https://opentdb.com/api.php?"
number <- as.numeric(number)
numbered_url <- paste0(baseurl, number)
return(numbered_url)
}
get_questions <- function(number,
category,
difficulty = c("any", "easy", "medium", "hard"),
type = "any", "multiple", "boolean"){
baseurl <- "https://opentdb.com/api.php?"
number <- as.numeric(number)
numbered_url <- paste0(baseurl, number)
return(numbered_url)
}
get_questions <- function(number,
category,
difficulty = c("any", "easy", "medium", "hard"),
type = "any", "multiple", "boolean"){
baseurl <- "https://opentdb.com/api.php?"
number <- as.numeric(number)
numbered_url <- paste0(baseurl, number)
return(numbered_url)
}
get_questions <- function(number){
baseurl <- "https://opentdb.com/api.php?"
number <- as.numeric(number)
numbered_url <- paste0(baseurl, number)
return(numbered_url)
}
get_questions <- function(number,
category,
difficulty = c("any", "easy", "medium", "hard"),
type = "any", "multiple", "boolean"){
baseurl <- "https://opentdb.com/api.php?"
number <- as.numeric(number)
numbered_url <- paste0(baseurl, number)
return(numbered_url)
}
get_questions <- function(number,
category,
difficulty = c("any", "easy", "medium", "hard"),
type = c("any", "multiple", "boolean")){
baseurl <- "https://opentdb.com/api.php?"
number <- as.numeric(number)
numbered_url <- paste0(baseurl, number)
return(numbered_url)
}
get_questions(12)
get_questions <- function(number,
category,
difficulty = c("any", "easy", "medium", "hard"),
type = c("any", "multiple", "boolean")){
baseurl <- "https://opentdb.com/api.php?"
number <- as.numeric(number)
numbered_url <- paste0(baseurl, "amount=" number)
return(numbered_url)
}
get_questions <- function(number,
category,
difficulty = c("any", "easy", "medium", "hard"),
type = c("any", "multiple", "boolean")){
baseurl <- "https://opentdb.com/api.php?"
number <- as.numeric(number)
numbered_url <- paste0(baseurl, "amount=" number)
return(numbered_url)
}
get_questions <- function(number,
category,
difficulty = c("any", "easy", "medium", "hard"),
type = c("any", "multiple", "boolean")){
baseurl <- "https://opentdb.com/api.php?"
number <- as.numeric(number)
numbered_url <- paste0(baseurl, "amount=", number)
return(numbered_url)
}
get_questions(12)
